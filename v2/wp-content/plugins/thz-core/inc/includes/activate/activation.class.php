<?php
if ( ! defined( 'ABSPATH' ) ) {
	exit; // No direct access
}

class ThzCore_Activate{
	/**
	 * The URL where the request is made for the registration details
	 * @var string
	 */
	private $endpoint;
	/**
	 * URL where user will be returned after successful activation
	 * @var string
	 */
	private $return_url;
	/**
	 * @var string
	 */
	private $token_endpoint = 'get-activation-token';
	/**
	 * @var string
	 */
	private $activate_token_endpoint = 'activate-token/%s';
	/**
	 * @var string
	 */
	private $deactivate_token_endpoint = 'get-deactivation-token';
	/**
	 * @var string
	 */
	private $deactivate_action_endpoint = 'deactivate-token/%s';
	/**
	 * @var ThzCore_Activation_Option
	 */
	private $option;

	/**
	 * Thz_Register constructor.
	 *
	 * @param string $endpoint
	 * @param $return_url
	 * @param ThzCore_Activation_Option $option
	 */
	public function __construct( $endpoint, $return_url, ThzCore_Activation_Option $option ) {
		$this->endpoint = $endpoint;
		$this->return_url = $return_url;
		$this->option = $option;
	}

	/**
	 * Registers the given key by making request to source server and ask for
	 * licence identification
	 */
	public function activate( $code ){
		$params = array(
			'url' => $this->referer(),
			'return_url' => $this->return_url,
			'envato_code' => trim( $code )
		);
		$response = $this->post( $this->endpoint . $this->token_endpoint, $params );
		if( !is_wp_error( $response ) && 200 == wp_remote_retrieve_response_code( $response ) ){
			$json = json_decode( wp_remote_retrieve_body( $response ) );
			if( $json->success ){
				wp_redirect( $this->endpoint . sprintf( $this->activate_token_endpoint, $json->token ) );
				die();
			}else{
				$this->option->set_option( false );
				new ThzCore_Admin_Notice( $json->message, 'notice notice-error is-dismissible' );
				/**
				 * Fire an error hook to allow third party scripts to display various messages
				 *
				 * @param string $message - the error message returned by Themezly API
				 * @param int $code - the custom error code generated by Themezly API
				 */
				do_action( 'thz_core_activation_error', $json->message, $json->code );
			}
		}else{
			new ThzCore_Admin_Notice( __( 'Your activation request could not be processed. Please try again in a few minutes. If this problem persists, please contact us.', 'thz-core' ), 'notice notice-error is-dismissible' );
		}
	}

	/**
	 * Theme deactivation process
	 */
	public function deactivate(){
		$params = array(
			'url' => $this->referer(),
			'return_url' => $this->return_url,
			'token' => $this->option->get_option()
		);
		$response = $this->post( $this->endpoint . $this->deactivate_token_endpoint, $params );
		if( !is_wp_error( $response ) && 200 == wp_remote_retrieve_response_code( $response ) ){
			$json = json_decode( wp_remote_retrieve_body( $response ) );
			if( $json->success ){
				wp_redirect( $this->endpoint . sprintf( $this->deactivate_action_endpoint, $json->token ) );
				die();
			}else{
				new ThzCore_Admin_Notice( $json->message, 'notice notice-error is-dismissible' );
			}
		}
	}

	/**
	 * Store activation key for later use
	 */
	public function token_actions(){
		// token activation
		if( isset( $_GET['thz_token'] ) ){
			$key = preg_replace( '/[^a-zA-Z0-9_\-]/', '', $_GET['thz_token'] );
			$this->option->set_option( $key );
		}else if( isset( $_GET['thz_action'] ) && 'deactivate' == $_GET['thz_action'] ){
			$this->option->delete_option();
		}


	}

	/**
	 * Make POST request
	 * @param $url
	 * @param $args - see https://codex.wordpress.org/HTTP_API#Other_Arguments
	 *
	 * @return array|WP_Error
	 */
	private function post( $url, $params = array() ){
		return wp_remote_post(
			$url,
			array(
				'timeout' => 15,
				'redirection' => 5,
				'blocking' => true,
				'sslverify' => false,
				'body' => $params
			)
		);
	}

	/**
	 * @return string
	 */
	private function referer(){
		return get_site_url();
	}
}